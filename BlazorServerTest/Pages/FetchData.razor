@page "/fetchdata"
@using BlazorServerTest.Data;
@using BlazorServerTest.Services;
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
	<button onclick="@(async () => await ForecastService.AddDefault())">➕</button>
	<ModalFormComponent OnDataSaved="@DataAddedHandler" />
	<input type="search" class="form-control" id="search" @bind="SearchTerm" @bind:event="oninput" placeholder="Enter search term..." autocomplete="off" />

	<p>@SearchTerm</p>
	<p>@pageSize</p>

	<table class="table">
		<thead>
		<tr>
			<th>Date</th>
			<th>Temp. (C)</th>
			<th>Temp. (F)</th>
			<th>Summary</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var forecast in forecasts)
		{
			<tr>
				<td>@forecast.Date.ToShortDateString()</td>
				<td>@forecast.TemperatureC</td>
				<td>@forecast.TemperatureF</td>
				<td>@forecast.Summary</td>
				<td><ConfirmModalComponent ButtonText="❌" Message="Do you rale want to delete?" Id="@forecast.Id" OnYes="@DeleteHandler" /></td>
			</tr>
		}
		</tbody>
	</table>
	<nav aria-label="Page navigation">
		<ul class="pagination">
			<li class="page-item @(currentPage == 1 ? "disabled" : "")">
				<a class="page-link" @onclick="() => SetPage(currentPage - 1)">Previous</a>
			</li>
			@for (var i = 1; i <= totalPages; i++)
			{
				var pageNum = i;
				<li class="page-item @(currentPage == pageNum ? "active" : "")">
					<a class="page-link" @onclick="() => SetPage(pageNum)">@pageNum</a>
				</li>
			}
			<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
				<a class="page-link" @onclick="() => SetPage(currentPage + 1)">Next</a>
			</li>
		</ul>
	</nav>
}

@code {
    private List<WeatherForecast> rawData;
	private List<WeatherForecast> forecasts;
	private int pageSize = 4;
	private int currentPage = 1;
	private int totalPages;

	string _searchTerm;
	private string SearchTerm
	{
		get => _searchTerm;
		set
		{
			_searchTerm = value;
			OnSearchChanged();
		}
	}

	protected override async Task OnInitializedAsync()
    {
		rawData = (await ForecastService.GetForecastAsync(String.Empty)).ToList();
	    AuxCalculating();
    }

	private void AuxCalculating()
	{
		totalPages = (int)Math.Ceiling(rawData.Count() / (double)pageSize);
		if (currentPage > totalPages)
		{
			currentPage = totalPages;
		}

		forecasts = rawData.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
	}

	private void DataAddedHandler(WeatherForecast addedItem)
	{
		rawData.Add(addedItem);
		AuxCalculating();
		StateHasChanged();
	}

	private void SetPage(int newPage)
	{
		currentPage = newPage;
		forecasts = rawData.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
		StateHasChanged();
	}

	private async Task DeleteHandler(int id)
	{
		await ForecastService.Delete(id);
		rawData = rawData.Where(x => x.Id != id).ToList();
		AuxCalculating();
		StateHasChanged();
	}

	private async Task OnSearchChanged()
	{
		Console.WriteLine(SearchTerm);
		rawData = (await ForecastService.GetForecastAsync(SearchTerm)).ToList();
		AuxCalculating();
		StateHasChanged();
	}
}
