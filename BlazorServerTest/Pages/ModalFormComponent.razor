@using BlazorServerTest.BLL.Services
@using BlazorServerTest.Data.Entities
@using Microsoft.AspNetCore.Components
@inject RecipeService ForecastService

<button type="button" class="btn btn-primary" @onclick="ShowModal">Show Modal </button>
<div class="modal" tabindex="-1" role="dialog" style="display: @(showModal ? "block" : "none")">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Modal Title</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideModal">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form>
					<div class="form-group">
						<label for="name">Sum</label>
						<input type="text" class="form-control" id="name" @bind="newItem.Name" />
					</div>
					<div class="form-group">
						<label for="email">Temp</label>
						<input type="email" class="form-control" id="email" @bind="newItem.Description" />
					</div>
					<div class="form-group">
						<label for="date">Date</label>
						<input type="number" class="form-control" id="date" @bind="newItem.CookTime" />
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideModal">Close</button>
				<button type="button" class="btn btn-primary" @onclick="SaveData">Save changes</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public EventCallback<RecipeEntity> OnDataSaved { get; set; }

	private bool showModal;
	private RecipeEntity newItem = new ();

	private void ShowModal()
	{
		showModal = true;
	}

	private void HideModal()
	{
		showModal = false;
	}

	private async Task SaveData()
	{
	// Save data to database or do something with the form data
		var added = await ForecastService.Add(newItem);
		newItem = new ();
		HideModal();
		await OnDataSaved.InvokeAsync(added);
	}
}
