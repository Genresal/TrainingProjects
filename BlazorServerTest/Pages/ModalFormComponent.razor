@using Microsoft.AspNetCore.Components
@using BlazorServerTest.Core.Data.Entities
@using BlazorServerTest.Core.Models.Categories
@using BlazorServerTest.Services
@using Mapster


<button type="button" class="btn btn-primary" @onclick="ShowModal">Show Modal </button>
<div class="modal" tabindex="-1" role="dialog" style="display: @(showModal ? "block" : "none")">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Modal Title</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideModal">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form>
					<div class="form-group">
						<label for="name">Sum</label>
						<input type="text" class="form-control" id="name" @bind="newItem.Name" />
					</div>
					<div class="form-group">
						<label for="email">Temp</label>
						<input type="email" class="form-control" id="email" @bind="newItem.Description" />
					</div>
					<div class="form-group">
						<label for="Interests">Categories:</label>
						<div>
							@foreach (var cat in categories)
							{
								//<div class="form-check form-check-inline">
								//	<input type="checkbox" class="form-check-input" id="@cat" @bind="cat.IsSelected" />
								//	<label class="form-check-label" for="@cat">@cat.Name</label>
								//</div>
							}
						</div>
					</div>
					<div class="form-group">
						<label for="time">Cook time</label>
						<input type="number" class="form-control" id="time" @bind="newItem.CookTime" />
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideModal">Close</button>
				<button type="button" class="btn btn-primary" @onclick="SaveData">Save changes</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public EventCallback<Recipe> OnDataSaved { get; set; }

	private bool showModal;
	private Recipe newItem = new ();
	private List<CategoryResponse> categories = new();

	private void ShowModal()
	{
		showModal = true;
	}

	private void HideModal()
	{
		showModal = false;
	}
	/**/
	protected override async Task OnInitializedAsync()
	{
		//categories = (await CategoryService.GetAllAsync()).Adapt<List<CategoryResponse>>();
	}

	private async Task SaveData()
	{
		/*
		var selectedCategories = categories.Where(x => x.IsSelected).ToList();
		newItem.Categories = selectedCategories.Adapt<List<Category>>();
		// Save data to database or do something with the form data
		var added = await ForecastService.AddAsync(newItem);
		newItem = new ();
		HideModal();
		await OnDataSaved.InvokeAsync(added);
		*/
	}
}*
