@using BlazorServerTest.Core.Data.Entities
@using BlazorServerTest.Core.Data.Repositories
@inject RecipeRepository RecipeRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            Update recipe?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Value="@recipe.Id.ToString()" Label="Server ID" ReadOnly="true" />
        <MudTextField @bind-Value="@recipe.Name" Label="Server Name" />
        <MudTextField @bind-Value="@recipe.Description" Label="Location" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Recipe recipe { get; set; } = new Recipe();

    //void Submit() => MudDialog.Close(DialogResult.Ok(true));
    private async Task Submit()
    {
    //In a real world scenario this bool would probably be a service to delete the item from api/database
        await RecipeRepository.Update(recipe);
        MudDialog.Close(DialogResult.Ok(recipe.Id));
    }
    void Cancel() => MudDialog.Cancel();
}
