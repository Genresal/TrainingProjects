@page "/fetchcategories"
@using Microsoft.AspNetCore.Components
@using BlazorServerTest.Core.Data.Entities
@using BlazorServerTest.Core.Data.Repositories
@inject CategoryRepository CategoryRepository

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a repository.</p>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ModalWrapperComponent Title="Add/Update Recipe" OnSave="DataAddedHandler">
        <!--<ChildContent>-->
        <form>
            <div class="form-group">
                <label for="name">Sum</label>
                <input type="text" class="form-control" id="name" @bind="newCategory.Name"/>
            </div>
        </form>
            <!--</ChildContent>-->
    </ModalWrapperComponent>

    <table class="table">
		<thead>
		<tr>
            <th>@nameof(Category.Id)</th>
                <th>@nameof(Category.Name)</th>
                <th>@nameof(Category.Quantity)</th>
            <th></th>
		</tr>
		</thead>
		<tbody>
		@foreach (var cat in categories)
		{
			<tr>
				<td>@cat.Id</td>
				<td>@cat.Name</td>
				<td>@cat.Quantity</td>
                <td><ConfirmModalComponent ButtonText="❌" Message="Do you rale want to delete?" Id="@cat.Id" OnYes="@DeleteHandler" /></td>
			</tr>
		}
		</tbody>
	</table>
}

@code {
    private List<Category> categories;
    private Category newCategory = new();

    protected override async Task OnInitializedAsync()
    {
        await CategoryRepository.CalculateRecipesQuantity();
        categories = (await CategoryRepository.GetAll()).ToList();
    }

    private async Task DataAddedHandler(bool isVisible)
	{
        var newCat = await CategoryRepository.Add(newCategory);
		categories.Add(newCat);
        isVisible = false;
        StateHasChanged();
	}

    private async Task DeleteHandler(int id)
	{
		await CategoryRepository.Delete(id);
		categories = categories.Where(x => x.Id != id).ToList();
        StateHasChanged();
	}
}
