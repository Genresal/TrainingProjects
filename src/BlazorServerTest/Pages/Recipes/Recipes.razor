@page "/recipes"
@inject RecipeManager RecipeManager
@inject IDialogService DialogService
@using BlazorServerTest.Core.Business
@using BlazorServerTest.Core.Models.Recipes
@inherits LayoutComponentBase

<PageTitle>Recipes</PageTitle>

<h1>Recipes</h1>

<p>This component demonstrates fetching data from a repository.</p>
<MudFab OnClick="@((e) => CreateRecipe())" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Label="Add new item" Size="Size.Small" Class="mb-3 me-2" />

<MudGrid>
    <MudItem xs="12" sm="2">
        <RecipesFilter @ref="Filter" FilterChanged="() => HandleCheckedChanged()" />
    </MudItem>
    <MudItem xs="12" sm="10">
        <MudPaper>
            <MudTable ServerData="@(new Func<TableState, Task<TableData<RecipeResponse>>>(ServerReload))"
                      Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" @bind-SelectedItem="selectedItem1" @ref="table">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Recipes</MudText>
                    <MudSpacer />
                    <MudIconButton Class="mt-4 me-4" OnClick="SearchField.Clear" Icon="@Icons.Material.Outlined.Clear" Color="Color.Error" Size="Size.Medium" />
                    <MudTextField T="string" @ref="SearchField" ValueChanged="table.ReloadServerData" Placeholder="Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(RecipeResponse.Id).ToLower()" T="RecipeResponse">@nameof(RecipeResponse.Id)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(RecipeResponse.Name).ToLower()" T="RecipeResponse">@nameof(RecipeResponse.Name)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(RecipeResponse.Description).ToLower()" T="RecipeResponse">@nameof(RecipeResponse.Description)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(RecipeResponse.AverageRating).ToLower()" T="RecipeResponse">@nameof(RecipeResponse.AverageRating)</MudTableSortLabel></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Rating">@context.AverageRating</MudTd>
                    <MudTd Class="d-flex justify-center">
                        <MudIconButton OnClick="@((e) => ViewRecipe(context.Id))" Icon="@Icons.Material.Filled.ViewList" Color="Color.Primary" Size="Size.Small" />
                        <MudIconButton OnClick="@((e) => UpdateCategory(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"/>
                        <MudIconButton OnClick="@((e) => DeleteCategory(context.Id))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"/>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
            
            <div class="d-flex flex-wrap mt-4">
                <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
                <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
                <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
                <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
                <MudSpacer />
                <div style="min-width:200px;">
                    <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.Name</MudText>
                </div>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudTable<RecipeResponse> table = new();
    private RecipesFilter Filter { get; set; } = new();
    private TableData<RecipeResponse> data;

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private RecipeResponse selectedItem1 = null;

    private MudTextField<string> SearchField { get; set; } = new ();

    private void HandleCheckedChanged()
    {
        table.ReloadServerData();
    }

    private async Task<TableData<RecipeResponse>> ServerReload(TableState state)
    {
        var request = new RecipeRequest()
            {
                Name = SearchField.Value,
                CategoryIds = Filter.categories.Where(x => x.IsChecked).Select(x => x.Item.Id).ToList(),
                StartDateTime = Filter.From,
                EndDateTime = Filter.To,
                Page = state.Page + 1, //MudBlazor count first page as 0
                PageSize = state.PageSize,
                OrderBy = $"{state.SortLabel}:{state.SortDirection}",
            };

        var response = await RecipeManager.GetRecipesAsync(request, CancellationToken.None);

        return new TableData<RecipeResponse>()
            {
                Items = response.Items,
                TotalItems = response.Total
            };
    }

    private async Task ViewRecipe(long id)
    {
        var recipe = await RecipeManager.GetRecipeDetailAsync(id, CancellationToken.None);
        var parameters = new DialogParameters { ["ViewModel"] = recipe };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = await DialogService.ShowAsync<ViewRecipeModal>("View Recipe", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task CreateRecipe()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<AddOrUpdateModal>("Create new Category", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task UpdateCategory(long id)
    {
        var recipe = await RecipeManager.GetRecipeDetailAsync(id, CancellationToken.None);
        var parameters = new DialogParameters { ["item"] = recipe };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = await DialogService.ShowAsync<AddOrUpdateModal>("Update Category", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task DeleteCategory(long id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DialogTemplateExample_Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RecipeManager.DeleteRecipeAsync(id, CancellationToken.None);
            await table.ReloadServerData();
        }
    }
}
